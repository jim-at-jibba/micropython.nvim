*micropython.nvim.txt*      For NVIM v0.8.0      Last change: 2024 December 12

==============================================================================
Table of Contents                         *micropython.nvim-table-of-contents*

1. micropython_nvim                        |micropython.nvim-micropython_nvim|
  - Introduction              |micropython.nvim-micropython_nvim-introduction|
  - Goals                            |micropython.nvim-micropython_nvim-goals|
  - Features                      |micropython.nvim-micropython_nvim-features|
  - Requirements              |micropython.nvim-micropython_nvim-requirements|
  - Quickstart                  |micropython.nvim-micropython_nvim-quickstart|
  - Installation              |micropython.nvim-micropython_nvim-installation|
  - Usage                            |micropython.nvim-micropython_nvim-usage|
  - Project Setup            |micropython.nvim-micropython_nvim-project-setup|

==============================================================================
1. micropython_nvim                        *micropython.nvim-micropython_nvim*


INTRODUCTION                  *micropython.nvim-micropython_nvim-introduction*

micropython_nvim is a plugin that aims to make it easier and more enjoyable to
work on micropython projects in Neovim. See the |micropython.nvim-quickstart|
section to get started.

N.B. If you open an existing project that has an `.ampy` configuration file in
the root directory, the plugin will automatically configure the port and baud
rate for you.

**IMPORTANT** This plugin assumes you are opening Neovim at the root of the
project. Some commands will not behave in the expected way if you choose not to
do this.


GOALS                                *micropython.nvim-micropython_nvim-goals*

- Allows you to run and upload your python files directly to your chosen micro-controller straight from Neovim
- Allows general file management
- Allows easy management of port, baudrate, and other settings
- Allows easy set up of project environment
    - Create a new project, with project specific settings
- Easy access to the REPL


FEATURES                          *micropython.nvim-micropython_nvim-features*

- **Run** local python files on your micro-controller
- **Upload** local python files to your micro-controller
- **REPL** access
- **File management**
- **Project initialisation**


REQUIREMENTS                  *micropython.nvim-micropython_nvim-requirements*

- Neovim >= 0.9 <https://github.com/neovim/neovim/releases/tag/v0.9.0>
- toggleterm.nvim <https://github.com/akinsho/toggleterm.nvim>
- dressing.nvim <https://github.com/stevearc/dressing.nvim>(optional)
- Adafruit ampy <>
- rshell <>


QUICKSTART                      *micropython.nvim-micropython_nvim-quickstart*

- |micropython.nvim-install| micropython_nvim using your preferred package manager
- Add a keybind to `run` function

>lua
    -- Lua
    vim.keymap.set("n", "<leader>mr", require("micropython_nvim").run)
<

- Follow the |micropython.nvim-project-setup| steps on automatically create the necessary files and directories for a new project.

**Next steps**

- Add a |micropython.nvim-statusline-component|


INSTALLATION                  *micropython.nvim-micropython_nvim-installation*

lazy.nvim ~

>lua
    {
        "jim-at-jibba/micropython.nvim",
        dependencies = { "akinsho/toggleterm.nvim", "stevearc/dressing.nvim" },
    }
<

packer ~

>lua
    use {
        "jim-at-jibba/micropython.nvim",
        requires = { "akinsho/toggleterm.nvim", "stevearc/dressing.nvim" },
    }
<


USAGE                                *micropython.nvim-micropython_nvim-usage*

- `:MPRun` runs current buffer on the micro-controller
- `:MPSetPort` sets the port, in both the `.ampy` configuration file and Neovim global variable
- `:MPSetBaud` sets the baudrate in the `.ampy` configuration file and Neovim global variable
- `:MPSetStubs` sets the stubs for the board in `requirments.txt` ready for installation
- `:MPRepl` opens the REPL
- `:MPInit` initalizes the project with basic settings and files. See |micropython.nvim-project-setup|
- `:MPUpload` uploads the current buffer to the micro-controller
- `:MPEraseOne` deletes single file or folder from device.
- `:MPUploadAll` uploads all files in the project. This command also accepts file or folder names to ignore i.e `:MPUploadAll test.py unused` and auto ignores the following files. Currently, you can not ignore files that are not in the root directory.

>lua
      local ignore_list = {
        ['.git'] = true,
        ['requirements.txt'] = true,
        ['.ampy'] = true,
        ['.vscode'] = true,
        ['.gitignore'] = true,
        ['project.pymakr'] = true,
        ['env'] = true,
        ['venv'] = true,
        ['__pycache__'] = true,
        ['.python-version'] = true,
        ['.micropy/'] = true,
        ['micropy.json'] = true,
      }
<


PROJECT SETUP                *micropython.nvim-micropython_nvim-project-setup*

Steps to initialize a project

- Create a new directory for your project
- Optional but highly recommended create a virtual environment
- Run `:MPInit` in the project directory, this will create the necessary files and directories. This includes:
    - `main.py`
        ```python
        from machine import Pin
        from time import sleep

led = Pin("LED", Pin.OUT)

while True: led.value(not led.value()) print("LED is ON" if led.value() else
"LED is OFF") sleep(0.5)

>
    - `.ampy` configuration file
    ```txt
    AMPY_BAUD=115200
    # AMPY_PORT=
    # Fix for macOS users' "Could not enter raw repl"; try 2.0 and lower from there:
    # AMPY_DELAY=0.5
<

- `requirments.txt` file

>txt
    adafruit-ampy
    rshell
    micropython-rp2-stubs
    ruff
<

- `pyrightconfig.json` file

>json
    {
      "reportMissingModuleSource": false
    }
<

- `:MPSetPort` to set the port
- `:MPSetStubs` to set the stubs for the board
- `:MPSetBaud` to set the baudrate if not the same as the default `115200`
- `pip install -r requirments.txt` to install the required packages

Now you be able to run the project using `:MPRun`. ### Statusline

A statusline component can be easily added to show whether a buffer is tagged.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
